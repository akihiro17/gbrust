pub fn clock(opecode: u8) -> u8 {
    match opecode {
        // nop
        0x0 => 4,
        // LD B, n
        0x06 | 0x0e | 0x16 | 0x1e | 0x26 | 0x2e => 8,
        // LD A, A
        0x7f => 4,

        0x47 | 0x4f | 0x57 | 0x5f | 0x67 | 0x6f => 4,
        0x02 | 0x12 | 0x77 => 8,
        0xea => 16,

        // 2. LD r1,r2
        0x78 | 0x79 | 0x7a | 0x7b | 0x7c | 0x7d => 4,
        0x7e | 0x0a | 0xfa => 8,

        0x40 | 0x41 | 0x42 | 0x43 | 0x44 | 0x45 => 4,
        0x46 => 8,

        0x48 | 0x49 | 0x4a | 0x4b | 0x4c | 0x4d => 4,
        0x4e => 8,

        0x50 | 0x51 | 0x52 | 0x53 | 0x54 | 0x55 => 4,
        0x56 => 8,

        0x58 | 0x59 | 0x5a | 0x5b | 0x5c | 0x5d => 4,
        0x5e => 8,

        0x60 | 0x61 | 0x62 | 0x63 | 0x64 | 0x65 => 4,
        0x66 => 8,

        0x68 | 0x69 | 0x6a | 0x6b | 0x6c | 0x6d => 4,
        0x6e => 8,

        0x70 | 0x71 | 0x72 | 0x73 | 0x74 | 0x75 => 4,
        0x36 => 8,

        // 3. LD A,n
        0x1a => 8,
        0x3e => 8,

        // 5. LD A,(C)
        0xf2 => 8,

        // 6. LD (C),A
        0xe2 => 8,

        // 9. LDD A,(HL)
        0x3a => 8,

        // 15. LDI A,(HL)
        0x2a => 8,

        // 18. LDI (HL),A
        0x22 => 8,

        // 20. LDH A,(n)
        0xf0 => 12,

        // 3.3.3. 8-Bit ALU
        // 1. ADD A,n
        0x80 | 0x81 | 0x82 | 0x83 | 0x84 | 0x85 => 4,
        0x86 => 8,
        0x87 => 4,
        0xc6 => 8,

        // 2. ADC A,n
        0x88 | 0x89 | 0x8a | 0x8b | 0x8c | 0x8d => 4,
        0x8e => 8,
        0x8f => 4,
        0xce => 8,

        // 3. SUB n
        0x97 | 0x90 | 0x91 | 0x92 | 0x93 | 0x94 | 0x95 => 4,
        0x96 => 8,
        0xd6 => 8,

        // 4. SBC A,n
        0x9f | 0x98 | 0x99 | 0x9a | 0x9b | 0x9c | 0x9d => 4,
        0x9e => 8,
        0xde => 8,

        // 8. CP n
        0xbf | 0xb8 | 0xb9 | 0xba | 0xbb | 0xbc | 0xbd => 4,
        0xbe => 8,
        0xfe => 8,

        // 5. AND n
        0xa7 | 0xa0 | 0xa1 | 0xa2 | 0xa3 | 0xa4 | 0xa5 => 4,
        0xa6 => 8,
        0xe6 => 8,

        // 6. OR n
        0xb7 | 0xb0 | 0xb1 | 0xb2 | 0xb3 | 0xb4 | 0xb5 => 4,
        0xb6 => 8,
        0xf6 => 8,

        // 7. XOR n
        0xaf | 0xa8 | 0xa9 | 0xaa | 0xab | 0xac | 0xad => 4,
        0xae => 8,
        0xee => 8,

        // 9. INC n
        0x3c | 0x04 | 0x0c | 0x14 | 0x1c | 0x24 | 0x2c => 4,
        0x34 => 12,

        // 10. DEC n
        0x3d | 0x05 | 0x0d | 0x15 | 0x1d | 0x25 | 0x2d => 4,
        0x35 => 12,

        // 3.3.4. 16-Bit Arithmetic
        // 1. ADD HL,n
        0x09 | 0x19 | 0x29 | 0x39 => 8,

        // 2. ADD SP,n
        0xe8 => 16,

        // 3. INC nn
        0x03 | 0x13 | 0x23 | 0x33 => 8,

        // 4. DEC nn
        0x0b | 0x1b | 0x2b | 0x3b => 8,

        // 19. LDH (n),A
        0xe0 => 12,

        // 16-bit Load instructions
        0x01 => 12,
        0x11 => 12,
        0x21 => 12,
        // LD SP, d16
        0x31 => 12,

        // 2. LD SP,HL
        0xf9 => 8,

        // 4. LDHL SP,n
        0xf8 => 12,

        // 5. LD (nn),SP
        0x08 => 20,

        // 6. PUSH nn
        0xf5 | 0xc5 | 0xd5 | 0xe5 => 16,

        // 7. POP nn
        0xf1 | 0xc1 | 0xd1 | 0xe1 => 12,

        // 3.3.8. Jumps
        // 1. JP nn
        0xc3 => 12,
        //2. JP cc,nn
        0xc2 | 0xca | 0xd2 | 0xda => 12,

        // 3. JP (HL)
        0xe9 => 4,
        // 4. JR n
        0x18 => 12,
        // 5. JR cc,n
        // NOTICE: inaccurate
        0x20 | 0x28 | 0x30 | 0x38 => 8,

        // 12. LDD (HL),A
        0x32 => 8,

        // 3.3.6. Rotates & Shifts
        // 1. RLCA
        0x07 => 4,

        // 2. RLA
        0x17 => 4,

        // 3. RRCA
        0x0f => 4,

        // 4. RRA
        0x1f => 4,

        // DAA
        0x27 => 4,

        // prefixed(CB)
        0xcb => 8,

        // 1. CALL nn
        0xcd => 24,

        // 2. CALL cc,nn
        0xc4 | 0xcc | 0xd4 | 0xdc => 24,

        // 1. RST n
        0xc7 | 0xcf | 0xd7 | 0xdf | 0xe7 | 0xef | 0xf7 | 0xff => 16,

        // 1. RET
        0xc9 => 16,

        // 2. RET cc
        0xc0 | 0xc8 | 0xd0 | 0xd8 => 8,

        // 3. RETI
        0xd9 => 16,

        // CPL
        0x2f => 4,

        // 4. CCF
        0x3f => 4,

        // 5. SCF
        0x37 => 4,

        // 7. HALT
        0x76 => 4,

        // 8. STOP
        0x10 => 4,

        // EI
        0xfb => 4,

        // DI
        0xf3 => 4,

        0xd3 | 0xdb | 0xdd | 0xe3..=0xe4 | 0xeb..=0xed | 0xf4 | 0xfc..=0xfd => {
            panic!("unrecognized instructions {:#x}", opecode)
        }
    }
}
